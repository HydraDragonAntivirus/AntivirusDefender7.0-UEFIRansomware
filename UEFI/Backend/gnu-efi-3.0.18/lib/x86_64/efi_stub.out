   1              	# 0 "C:\\Users\\victim\\Desktop\\dangerous\\yuziakicin\\UEFI\\UEFI\\Backend\\gnu-efi-3.0.18\\lib\\x
   2              	# 1 "C:\\Users\\victim\\Desktop\\dangerous\\yuziakicin\\UEFI\\UEFI\\Backend//"
   0              	
   0              	
   0              	
   1              	/*
   2              	 * Function calling ABI conversion from Linux to EFI for x86_64
   3              	 *
   4              	 * Copyright (C) 2007 Intel Corp
   5              	 *	Bibo Mao <bibo.mao@intel.com>
   6              	 *	Huang Ying <ying.huang@intel.com>
   7              	 * Copyright (C) 2012 Felipe Contreras <felipe.contreras@gmail.com>
   8              	 */
   9              	
  10              	#if !defined(HAVE_USE_MS_ABI)
  11              	/*
  12              	 * EFI calling conventions are documented at:
  13              	 *   http://msdn.microsoft.com/en-us/library/ms235286%28v=vs.80%29.aspx
  14              	 * ELF calling conventions are documented at:
  15              	 *   http://www.x86-64.org/documentation/abi.pdf
  16              	 *
  17              	 * Basically here are the conversion rules:
  18              	 * a) our function pointer is in %rdi
  19              	 * b) rsi through r8 (elf) aka rcx through r9 (ms) require stack space
  20              	 *    on the MS side even though it's not getting used at all.
  21              	 * c) 8(%rsp) is always aligned to 16 in ELF, so %rsp is shifted 8 bytes extra
  22              	 * d) arguments are as follows: (elf -> ms)
  23              	 *   1) rdi -> rcx (32 saved)
  24              	 *   2) rsi -> rdx (32 saved)
  25              	 *   3) rdx -> r8 (32 saved)
  26              	 *   4) rcx -> r9 (32 saved)
  27              	 *   5) r8 -> 32(%rsp) (32 saved)
  28              	 *   6) r9 -> 40(%rsp) (48 saved)
  29              	 *   7) 8(%rsp) -> 48(%rsp) (48 saved)
  30              	 *   8) 16(%rsp) -> 56(%rsp) (64 saved)
  31              	 *   9) 24(%rsp) -> 64(%rsp) (64 saved)
  32              	 *  10) 32(%rsp) -> 72(%rsp) (80 saved)
  33              	 * e) because the first argument we recieve in a thunker is actually the
  34              	 *    function to be called, arguments are offset as such:
  35              	 *   0) rdi -> caller
  36              	 *   1) rsi -> rcx (32 saved)
  37              	 *   2) rdx -> rdx (32 saved)
  38              	 *   3) rcx -> r8 (32 saved)
  39              	 *   4) r8 -> r9 (32 saved)
  40              	 *   5) r9 -> 32(%rsp) (32 saved)
  41              	 *   6) 8(%rsp) -> 40(%rsp) (48 saved)
  42              	 *   7) 16(%rsp) -> 48(%rsp) (48 saved)
  43              	 *   8) 24(%rsp) -> 56(%rsp) (64 saved)
  44              	 *   9) 32(%rsp) -> 64(%rsp) (64 saved)
  45              	 *  10) 40(%rsp) -> 72(%rsp) (80 saved)
  46              	 * f) arguments need to be moved in opposite order to avoid clobbering
  47              	 */
  48              	
  49              	#define ENTRY(name)	\
  50              		.globl name;	\
  51              		name:
  52              	
  53              	ENTRY(efi_call0)
  54 0000 4883EC28 		subq $40, %rsp
  55 0004 FFD7     		call *%rdi
  56 0006 4883C428 		addq $40, %rsp
  57 000a C3       		ret
  58              	
  59              	ENTRY(efi_call1)
  60 000b 4883EC28 		subq $40, %rsp
  61 000f 4889F1   		mov  %rsi, %rcx
  62 0012 FFD7     		call *%rdi
  63 0014 4883C428 		addq $40, %rsp
  64 0018 C3       		ret
  65              	
  66              	ENTRY(efi_call2)
  67 0019 4883EC28 		subq $40, %rsp
  68              		/* mov %rdx, %rdx */
  69 001d 4889F1   		mov  %rsi, %rcx
  70 0020 FFD7     		call *%rdi
  71 0022 4883C428 		addq $40, %rsp
  72 0026 C3       		ret
  73              	
  74              	ENTRY(efi_call3)
  75 0027 4883EC28 		subq $40, %rsp
  76 002b 4989C8   		mov  %rcx, %r8
  77              		/* mov %rdx, %rdx */
  78 002e 4889F1   		mov  %rsi, %rcx
  79 0031 FFD7     		call *%rdi
  80 0033 4883C428 		addq $40, %rsp
  81 0037 C3       		ret
  82              	
  83              	ENTRY(efi_call4)
  84 0038 4883EC28 		subq $40, %rsp
  85 003c 4D89C1   		mov %r8, %r9
  86 003f 4989C8   		mov %rcx, %r8
  87              		/* mov %rdx, %rdx */
  88 0042 4889F1   		mov %rsi, %rcx
  89 0045 FFD7     		call *%rdi
  90 0047 4883C428 		addq $40, %rsp
  91 004b C3       		ret
  92              	
  93              	ENTRY(efi_call5)
  94 004c 4883EC28 		subq $40, %rsp
  95 0050 4C894C24 		mov %r9, 32(%rsp)
  95      20
  96 0055 4D89C1   		mov %r8, %r9
  97 0058 4989C8   		mov %rcx, %r8
  98              		/* mov %rdx, %rdx */
  99 005b 4889F1   		mov %rsi, %rcx
 100 005e FFD7     		call *%rdi
 101 0060 4883C428 		addq $40, %rsp
 102 0064 C3       		ret
 103              	
 104              	ENTRY(efi_call6)
 105 0065 4883EC38 		subq $56, %rsp
 106 0069 488B4424 		mov 56+8(%rsp), %rax
 106      40
 107 006e 48894424 		mov %rax, 40(%rsp)
 107      28
 108 0073 4C894C24 		mov %r9, 32(%rsp)
 108      20
 109 0078 4D89C1   		mov %r8, %r9
 110 007b 4989C8   		mov %rcx, %r8
 111              		/* mov %rdx, %rdx */
 112 007e 4889F1   		mov %rsi, %rcx
 113 0081 FFD7     		call *%rdi
 114 0083 4883C438 		addq $56, %rsp
 115 0087 C3       		ret
 116              	
 117              	ENTRY(efi_call7)
 118 0088 4883EC38 		subq $56, %rsp
 119 008c 488B4424 		mov 56+16(%rsp), %rax
 119      48
 120 0091 48894424 		mov %rax, 48(%rsp)
 120      30
 121 0096 488B4424 		mov 56+8(%rsp), %rax
 121      40
 122 009b 48894424 		mov %rax, 40(%rsp)
 122      28
 123 00a0 4C894C24 		mov %r9, 32(%rsp)
 123      20
 124 00a5 4D89C1   		mov %r8, %r9
 125 00a8 4989C8   		mov %rcx, %r8
 126              		/* mov %rdx, %rdx */
 127 00ab 4889F1   		mov %rsi, %rcx
 128 00ae FFD7     		call *%rdi
 129 00b0 4883C438 		addq $56, %rsp
 130 00b4 C3       		ret
 131              	
 132              	ENTRY(efi_call8)
 133 00b5 4883EC48 		subq $72, %rsp
 134 00b9 488B4424 		mov 72+24(%rsp), %rax
 134      60
 135 00be 48894424 		mov %rax, 56(%rsp)
 135      38
 136 00c3 488B4424 		mov 72+16(%rsp), %rax
 136      58
 137 00c8 48894424 		mov %rax, 48(%rsp)
 137      30
 138 00cd 488B4424 		mov 72+8(%rsp), %rax
 138      50
 139 00d2 48894424 		mov %rax, 40(%rsp)
 139      28
 140 00d7 4C894C24 		mov %r9, 32(%rsp)
 140      20
 141 00dc 4D89C1   		mov %r8, %r9
 142 00df 4989C8   		mov %rcx, %r8
 143              		/* mov %rdx, %rdx */
 144 00e2 4889F1   		mov %rsi, %rcx
 145 00e5 FFD7     		call *%rdi
 146 00e7 4883C448 		addq $72, %rsp
 147 00eb C3       		ret
 148              	
 149              	ENTRY(efi_call9)
 150 00ec 4883EC48 		subq $72, %rsp
 151 00f0 488B4424 		mov 72+32(%rsp), %rax
 151      68
 152 00f5 48894424 		mov %rax, 64(%rsp)
 152      40
 153 00fa 488B4424 		mov 72+24(%rsp), %rax
 153      60
 154 00ff 48894424 		mov %rax, 56(%rsp)
 154      38
 155 0104 488B4424 		mov 72+16(%rsp), %rax
 155      58
 156 0109 48894424 		mov %rax, 48(%rsp)
 156      30
 157 010e 488B4424 		mov 72+8(%rsp), %rax
 157      50
 158 0113 48894424 		mov %rax, 40(%rsp)
 158      28
 159 0118 4C894C24 		mov %r9, 32(%rsp)
 159      20
 160 011d 4D89C1   		mov %r8, %r9
 161 0120 4989C8   		mov %rcx, %r8
 162              		/* mov %rdx, %rdx */
 163 0123 4889F1   		mov %rsi, %rcx
 164 0126 FFD7     		call *%rdi
 165 0128 4883C448 		addq $72, %rsp
 166 012c C3       		ret
 167              	
 168              	ENTRY(efi_call10)
 169 012d 4883EC58 		subq $88, %rsp
 170 0131 488B8424 		mov 88+40(%rsp), %rax
 170      80000000 
 171 0139 48894424 		mov %rax, 72(%rsp)
 171      48
 172 013e 488B4424 		mov 88+32(%rsp), %rax
 172      78
 173 0143 48894424 		mov %rax, 64(%rsp)
 173      40
 174 0148 488B4424 		mov 88+24(%rsp), %rax
 174      70
 175 014d 48894424 		mov %rax, 56(%rsp)
 175      38
 176 0152 488B4424 		mov 88+16(%rsp), %rax
 176      68
 177 0157 48894424 		mov %rax, 48(%rsp)
 177      30
 178 015c 488B4424 		mov 88+8(%rsp), %rax
 178      60
 179 0161 48894424 		mov %rax, 40(%rsp)
 179      28
 180 0166 4C894C24 		mov %r9, 32(%rsp)
 180      20
 181 016b 4D89C1   		mov %r8, %r9
 182 016e 4989C8   		mov %rcx, %r8
 183              		/* mov %rdx, %rdx */
 184 0171 4889F1   		mov %rsi, %rcx
 185 0174 FFD7     		call *%rdi
 186 0176 4883C458 		addq $88, %rsp
 187 017a C3909090 		ret
 187      9090
